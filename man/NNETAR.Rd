% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nnetar.R
\name{NNETAR}
\alias{NNETAR}
\title{Neural Network Time Series Forecasts}
\usage{
NNETAR(formula, size = NULL, repeats = 20, scale_inputs = TRUE, ...)
}
\arguments{
\item{formula}{Model specification.}

\item{size}{Number of nodes in the hidden layer. Default is half of the
number of input nodes (including external regressors, if given) plus 1.}

\item{repeats}{Number of networks to fit with different random starting
weights. These are then averaged when producing forecasts.}

\item{scale_inputs}{If TRUE, inputs are scaled by subtracting the column
means and dividing by their respective standard deviations. Scaling is
applied after transformations.}

\item{...}{Other arguments passed to \code{\link[nnet]{nnet}}.}
}
\description{
Feed-forward neural networks with a single hidden layer and lagged inputs
for forecasting univariate time series.
}
\details{
A feed-forward neural network is fitted with lagged values of the response as
inputs and a single hidden layer with \code{size} nodes. The inputs are for
lags 1 to \code{p}, and lags \code{m} to \code{mP} where
\code{m} is the seasonal period specified.

If exogenous regressors are provided, its columns are also used as inputs.
Missing values are currently not supported by this model.
A total of \code{repeats} networks are
fitted, each with random starting weights. These are then averaged when
computing forecasts. The network is trained for one-step forecasting.
Multi-step forecasts are computed recursively.

For non-seasonal data, the fitted model is denoted as an NNAR(p,k) model,
where k is the number of hidden nodes. This is analogous to an AR(p) model
but with non-linear functions. For seasonal data, the fitted model is called
an NNAR(p,P,k)[m] model, which is analogous to an ARIMA(p,0,0)(P,0,0)[m]
model but with non-linear functions.
}
\author{
Gabriel Caceres, Mitchell O'Hara-Wild & Rob J Hyndman
}
